database schema structure
1. model_version
2. hyperparameters used for training
3. path to the images
4. base model used for training
5. dataset path
6. dataset name





mapping for model to test
1. test type 


schema for test type
1. kit name
2. kit id
3 kit ai options



ai_options mapping table
primary key is ai_option_uid
1. the ai_option -string unique
2. The label name used in annotation


we would do an inital load for the ai_options




ai_options exampler
1. "red_light"
2. "green_light" 
3. "yellow_light"
4. "stop_sign"
5. "speed_limit"
6. "no_entry"
7. "yield"
8. "pedestrian_crossing"


// or connnec to thier salesforce endpoint

- when we want to train a model, we connect to the salesforce endpoint, get the ai options for the test kit,
- we then create a test_type record in our database with the kit name, kit id, and the ai options



many to many relationship between ai_option and test_type
primary key is uid
kit_id is foreign key to test_type
ai_option_uid is foreign key to ai_option


proper lighting- none selectable
etc



model training flow
1. to train a model, we fetch a list of possible test_types eg Pr demo intercept from the database
2. Parse this list, to show only test_types that have ai_options.
3. User selects the test type, and the ai options they want to train on..-allow to select mutiple test_types
4. select only ai_options that have a selectable tag
4. when they select the test_type(s) we then fetch the ai_options for the test_type(s)
    i. wed do a check in the db 1. to see if the ai_options are already in the db- wed bring a ui for them telling to put in the label name - guid them with an image
    
     2.  We will generate a dataset_name for the model training to see if the test_type is already in the db - save test type , map the test to the ai options in the db disclaimer( dataset_name is still editable but they wont know)
      3. to see if the model_version is already in the db, course of actions. 1. if it is, we can skip the training 2. we can do a v2 training 3. we can retrain the model
      4 if model_version is not in the db, we can do a new training
5. upload the dataset - json to backend. 
6. lets give th option to upload the dataset from a local file or from a url
7 if all vaidations are sucessful, we can start the training


pr urine, pr urine kit , pr dna urine  4567 589 678- merge this ids to a consistent id- training_id-consider ai options as well unique- 

some tests use the same ai_models, but have  different ai_options.




table for model_trainings  - mongodb???
1. uid
2. dataset_name
3. model_id - foreign key to model- nullable
4. training_status - string - training, trained, failed
5. training_start_time - timestamp - timestamp of the training start
6. training_end_time - timestamp - timestamp of the training end
7. training_duration - int - duration of the training in seconds???
8. training_logs - text - logs of the training
9. training_error - text - error of the training



evaluation table-mongodb
1. uid
2. model_id - foreign key to model
3. evaluation_start_time - timestamp - timestamp of the evaluation start
4. evaluation_end_time - timestamp - timestamp of the evaluation end
5. evaluation_duration - int - duration of the evaluation in seconds
6. evaluation_logs - text - logs of the evaluation
7. evaluation_error - text - error of the evaluation    ???? not yet approved







model table
1. model id - primary key(generated by the backend)
2. training_id - foreign key to model_trainings (confusion- they select the same test_types but have different ai_options)
3. model_version - string - 1 , increment based on existing training_id, and the model_version
4. model_name - string - model_name_training_id_model_version
5. s3_model_path - string - path to the model
6. beam_model_path - string - path to the model
7. hyperparameters_uid - foreign key to hyperparameters



hyperparameters table
1. uid- none editable- delete if not used / if the model that implemeted it does not exist- 
2. timestamp
...hyperparameters






model to test_type mapping table
1. model_id - foreign key to model
2. test_type_id - foreign key to test_type
3. ai_option_uid - foreign key to ai_option
4. is_active - boolean - true or false
